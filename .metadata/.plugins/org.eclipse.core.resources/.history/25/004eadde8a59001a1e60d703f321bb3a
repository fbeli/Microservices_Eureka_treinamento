package com.becb.app.ws.ui.controller;

import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.validation.Valid;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.becb.app.ws.model.UpdateUserDetailsRequestModel;
import com.becb.app.ws.model.UserDetailsRequestModel;
import com.becb.app.ws.model.response.UserRest;

@RestController
@RequestMapping("users") // http://localhost:8080/users
public class UserController {

	Map<String, UserRest> users;
	
	@Autowired
	UserServiceInterface userService;
	
	
	// @GetMapping(path="/{userId}") // Path informa que necessita da variÃ¡vel ->
	// localhost:8080/users/98731
	@GetMapping(path = "/{userId}", produces = { MediaType.APPLICATION_XML_VALUE, MediaType.APPLICATION_JSON_VALUE })
	public ResponseEntity<UserRest> getUser(@PathVariable String userId) {
		UserRest returnRest = new UserRest();

		returnRest.setEmail("fred.belis@lugar.co");
		returnRest.setFirstName("Fred");
		returnRest.setLastName("Sousa");
		returnRest.setUserId(userId);

		if(users.containsKey(userId))	
			return new ResponseEntity(users.get(userId), HttpStatus.OK);
		return new ResponseEntity(HttpStatus.NO_CONTENT);
	}

	@GetMapping
	public String getUsers(@RequestParam(value = "page", defaultValue = "34") int page,
			@RequestParam(value = "limit") int limit) {
		
		String valorNulo = null;
		
		valorNulo.length();
		return "get page : " + page + " limit : " + limit;
	}

	@PostMapping(consumes = { MediaType.APPLICATION_JSON_VALUE }, 
			produces = { MediaType.APPLICATION_JSON_VALUE })
	public ResponseEntity<UserRest> createUser( @Valid @RequestBody UserDetailsRequestModel userDetails) {

		UserRest returnRest = new UserRest();

		returnRest.setEmail(userDetails.getEmail());
		returnRest.setFirstName(userDetails.getFirstName());
		returnRest.setLastName(userDetails.getLastName());

		returnRest.setUserId(UUID.randomUUID().toString());
		System.out.println("senha: " + userDetails.getSenha());

		if(null==users) users = new HashMap<>();
		
		users.put(returnRest.getUserId(), returnRest);
		return new ResponseEntity<UserRest>(returnRest, HttpStatus.OK);
	}

	@PutMapping(path = "/{userId}",consumes = { MediaType.APPLICATION_JSON_VALUE }, 
			produces = { MediaType.APPLICATION_JSON_VALUE })
	public ResponseEntity<UserRest> updateUser(@PathVariable String userId, @Valid @RequestBody UpdateUserDetailsRequestModel userDetails ) {
		
		UserRest user;
		if(users.containsKey(userId)) {
			user = users.get(userId);
			user.setFirstName(userDetails.getFirstName());
			user.setLastName(userDetails.getLastName());
			
			users.put(userId, user);
			
			return new ResponseEntity(user, HttpStatus.OK);
		}
		return new ResponseEntity(HttpStatus.NO_CONTENT);
			

	}

	@DeleteMapping(path="/{userId}")
	public ResponseEntity deleteUser(@PathVariable String userId) {
		
		users.remove(userId);
		return new ResponseEntity(HttpStatus.NO_CONTENT);
	}
}
